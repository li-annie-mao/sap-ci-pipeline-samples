{
	"info": {
		"_postman_id": "e4e2d85f-201c-4228-b362-1fc0c3ddf798",
		"name": "Pipeline Concept - Sample Scenarios",
		"description": "This collection helps you to setup and run sample scenarios for the Process Integration Pipeline Concept for Cloud Integration.\n\nWe distingush the following scenarios:\n\n- Scenario 1: Recipient List & Interface Split\n    \n- Scenario 2: Interface Split with Multi Mapping & XI inbound\n    \n- Scenario 3: Interface Split with Maintain Order at Runtime\n    \n- Scenario 4: Use Extended Receiver Determination mapping instead of XSLT\n    \n- Scenario 5: Point-to-Point (Bypass option)\n    \n- Scenario 6: Point-to-Point with IDoc inbound",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33477405"
	},
	"item": [
		{
			"name": "SAP Integration Suite Landscape",
			"item": [
				{
					"name": "Setup Partner Directory entries",
					"item": [
						{
							"name": "Read Tenant Info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tenantName\", jsonData.TenantName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/http/pip/tenant/details",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"tenant",
										"details"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Map QA to Landscape",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"SAP_Integration_Suite_Landscape\",\r\n\t\"Id\": \"{{tenantName}}\",\r\n\t\"Value\": \"QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Landscape Mapping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='SAP_Integration_Suite_Landscape',Id='{{tenantName}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='SAP_Integration_Suite_Landscape',Id='{{tenantName}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean up Partner Directory",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Landscape Mapping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='SAP_Integration_Suite_Landscape',Id='{{tenantName}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='SAP_Integration_Suite_Landscape',Id='{{tenantName}}')"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{password}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{username}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scenario 1 - RL with IF Split",
			"item": [
				{
					"name": "Setup Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create InboundConversionEndpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"InboundConversionEndpoint\",\r\n\t\"Value\": \"/PIP/Step03/Samples/{{scenario}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"3\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ReceiverSpecificQueue for R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{receiver_1}}\",\r\n\t\"Id\": \"ReceiverSpecificQueue\",\r\n\t\"Value\": \"{{receiver_1}}Q04\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n\t<xsl:template match=\"/\">\r\n    <ns0:Receivers xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n     <ReceiverNotDetermined>\r\n       <Type>Error</Type>\r\n       <DefaultReceiver/>\r\n    </ReceiverNotDetermined>\r\n    <xsl:if test=\"/*:Item/Category = 'Keyboards'\">\r\n      <Receiver>\r\n        <Service>{{receiver_1}}</Service>\r\n      </Receiver>\r\n    </xsl:if>\r\n    <xsl:if test=\"(/*:Item/Category = 'Keyboards') or (/*:Item/Category = 'Software')\">\r\n      <Receiver>\r\n        <Service>{{receiver_2}}</Service>\r\n      </Receiver>\r\n    </xsl:if>\r\n    <xsl:if test=\"(/*:Item/Category = 'Keyboards') and (/*:Item/ProductName != 'XXXX')\">\r\n      <Receiver>\r\n        <Service>{{receiver_3}}</Service>\r\n      </Receiver>\r\n    </xsl:if>\r\n    </ns0:Receivers>\r\n\t</xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interfaceDetermination XSLT for R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_1}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <xsl:if test=\"/*:Item/Quantity = '10'\">\r\n                <Interface>\r\n                    <Index>1</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx1</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:Item/CurrencyCode = 'EUR'\">\r\n                <Interface>\r\n                    <Index>2</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx2</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:Item/Quantity != '10'\">\r\n                <Interface>\r\n                    <Index>3</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx3</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interfaceDetermination XSLT for R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_2}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n<!-- define header dc_country -->\r\n\t<xsl:param name=\"dc_country\"/>\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <xsl:if test=\"$dc_country = 'DE'\">\r\n                <Interface>\r\n                    <Index>1</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_2}}/IfIdx1</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n            <xsl:if test=\"$dc_country != 'DE'\">\r\n                <Interface>\r\n                    <Index>2</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_2}}/IfIdx2</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interfaceDetermination XSLT for R3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_3}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <xsl:if test=\"/*:Item/Quantity = '10'\">\r\n                <Interface>\r\n                    <Index>1</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_3}}/IfIdx1</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:Item/CurrencyCode = 'EUR'\">\r\n                <Interface>\r\n                    <Index>2</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_3}}/IfIdx2</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:Item/Quantity != '10'\">\r\n                <Interface>\r\n                    <Index>3</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_3}}/IfIdx3</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read InboundConversionEndpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='InboundConversionEndpoint')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='InboundConversionEndpoint')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read ReceiverSpecificQueue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{receiver_1}}',Id='ReceiverSpecificQueue')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{receiver_1}}',Id='ReceiverSpecificQueue')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read interfaceDetermination XSLT for R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_1}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read interfaceDetermination XSLT for R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_2}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read interfaceDetermination XSLT for R3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_3}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n\t<xsl:template match=\"/\">\r\n    <ns0:Receivers xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n     <ReceiverNotDetermined>\r\n       <Type>Ignore</Type>\r\n       <DefaultReceiver/>\r\n    </ReceiverNotDetermined>\r\n    <xsl:if test=\"/*:Item/Category = 'Keyboards'\">\r\n      <Receiver>\r\n        <Service>{{receiver_1}}</Service>\r\n      </Receiver>\r\n    </xsl:if>\r\n    <xsl:if test=\"(/*:Item/Category = 'Keyboards') or (/*:Item/Category = 'Software')\">\r\n      <Receiver>\r\n        <Service>{{receiver_2}}</Service>\r\n      </Receiver>\r\n    </xsl:if>\r\n    <xsl:if test=\"(/*:Item/Category = 'Keyboards') and (/*:Item/ProductName != 'XXXX')\">\r\n      <Receiver>\r\n        <Service>{{receiver_3}}</Service>\r\n      </Receiver>\r\n    </xsl:if>\r\n    </ns0:Receivers>\r\n\t</xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update interfaceDetermination XSLT for R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_1}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <xsl:if test=\"/*:Item/Quantity = '20'\">\r\n                <Interface>\r\n                    <Index>1</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx1</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:Item/CurrencyCode = 'EUR'\">\r\n                <Interface>\r\n                    <Index>2</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx2</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:Item/Quantity != '20'\">\r\n                <Interface>\r\n                    <Index>3</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx3</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update interfaceDetermination XSLT for R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_2}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <Interface>\r\n                <Index>1</Index>\r\n                <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_2}}/IfIdx1</Service>\r\n            </Interface>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update interfaceDetermination XSLT for R3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_3}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <xsl:if test=\"/*:Item/Quantity = '10'\">\r\n                <Interface>\r\n                    <Index>1</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_3}}/IfIdx1</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:Item/CurrencyCode = 'USD'\">\r\n                <Interface>\r\n                    <Index>2</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_3}}/IfIdx2</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:Item/Quantity != '10'\">\r\n                <Interface>\r\n                    <Index>3</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_3}}/IfIdx3</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean up Partner Directory",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{pid}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{pid}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trigger sample messages",
					"item": [
						{
							"name": "Send Order Software - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:Item\":{\r\n        \"@PurchaseOrderNumber\":\"19201\",\r\n        \"@OrderDate\":\"2019-05-06\",\r\n        \"@ItemNumber\":\"10\",\r\n        \"ProductId\":\"HT-XXXX\",\r\n        \"ProductName\":\"XXXX\",\r\n        \"Category\":\"Software\",\r\n        \"Quantity\":\"10\",\r\n        \"CurrencyCode\":\"EUR\",\r\n        \"Price\":\"799.00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}?country=DE",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									],
									"query": [
										{
											"key": "country",
											"value": "DE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order Keyboards - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:Item\":{\r\n        \"@PurchaseOrderNumber\":\"19202\",\r\n        \"@OrderDate\":\"2019-05-06\",\r\n        \"@ItemNumber\":\"10\",\r\n        \"ProductId\":\"HT-0001\",\r\n        \"ProductName\":\"Smart Keyboards\",\r\n        \"Category\":\"Keyboards\",\r\n        \"Quantity\":\"10\",\r\n        \"CurrencyCode\":\"EUR\",\r\n        \"Price\":\"799.00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}?country=US",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									],
									"query": [
										{
											"key": "country",
											"value": "US"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order SoftwareX - ReceiverNotFound Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:Item\":{\r\n        \"@PurchaseOrderNumber\":\"19203\",\r\n        \"@OrderDate\":\"2019-05-06\",\r\n        \"@ItemNumber\":\"10\",\r\n        \"ProductId\":\"HT-XXXX\",\r\n        \"ProductName\":\"XXXX\",\r\n        \"Category\":\"SoftwareX\",\r\n        \"Quantity\":\"10\",\r\n        \"CurrencyCode\":\"EUR\",\r\n        \"Price\":\"799.00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}?country=DE",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									],
									"query": [
										{
											"key": "country",
											"value": "DE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order Software - InboundConversion Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:Item\":{\r\n        \"@PurchaseOrderNumber\":\"19204\",\r\n        \"@OrderDate\":\"2019-05-06\",\r\n        \"@ItemNumber\":\"10\",\r\n        \"ProductId\":\"HT-XXXX\",\r\n        \"ProductName\":\"XXXX\",\r\n        \"Category\":\"Software\",\r\n        \"Quantity\":\"10\",\r\n        \"CurrencyCode\":\"EUR\",\r\n        \"Price\":\"799.00\"\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}?country=DE&simulateError=true",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									],
									"query": [
										{
											"key": "country",
											"value": "DE"
										},
										{
											"key": "simulateError",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order Software - InboundConversion Error testMode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "testMode",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:Item\":{\r\n        \"@PurchaseOrderNumber\":\"19205\",\r\n        \"@OrderDate\":\"2019-05-06\",\r\n        \"@ItemNumber\":\"10\",\r\n        \"ProductId\":\"HT-XXXX\",\r\n        \"ProductName\":\"XXXX\",\r\n        \"Category\":\"Software\",\r\n        \"Quantity\":\"10\",\r\n        \"CurrencyCode\":\"EUR\",\r\n        \"Price\":\"799.00\"\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}?country=DE&simulateError=true",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									],
									"query": [
										{
											"key": "country",
											"value": "DE"
										},
										{
											"key": "simulateError",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Sample scenario with multiple receivers (Recipient List) and multiple interfaces (Interface Split)\n\n- Receiver determination xpath based on Category and Product Name\n- Interface determination xpath based on Quantity and Currency code\n- Use receiver specific outbound queue for receiver 1\n- Use inbound conversion to map from JSON to XML\n- Use alternative partner to map sender and sender interface to scenario name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"scenario\", \"Scenario_1\");",
							"pm.collectionVariables.set(\"sender\", \"Sender_1\");",
							"pm.collectionVariables.set(\"interface\", \"PurchaseOrderItem.Create\");",
							"pm.collectionVariables.set(\"receiver_1\", \"Receiver_11\");",
							"pm.collectionVariables.set(\"receiver_2\", \"Receiver_12\");",
							"pm.collectionVariables.set(\"receiver_3\", \"Receiver_13\");",
							"pm.collectionVariables.set(\"pid\", \"PIP_Samples_\"+pm.collectionVariables.get(\"scenario\"));",
							"pm.collectionVariables.set(\"pidOld\", pm.collectionVariables.get(\"sender\")+\"~\"+pm.collectionVariables.get(\"interface\"));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scenario 1A - Combined RL & IF Determination",
			"item": [
				{
					"name": "Setup Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create InboundConversionEndpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"InboundConversionEndpoint\",\r\n\t\"Value\": \"/PIP/Step03/Samples/{{scenario}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n\t<xsl:param name=\"dc_country\"/>\r\n    <xsl:template match=\"/\">\r\n    <ns0:Receivers xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n        <ReceiverNotDetermined>\r\n            <Type>Error</Type>\r\n            <DefaultReceiver/>\r\n        </ReceiverNotDetermined>\r\n        <xsl:if test=\"/*:Item/Category = 'Keyboards'\">\r\n            <Receiver>\r\n                <Service>{{receiver_1}}</Service>\r\n                <Interfaces>\r\n                <xsl:if test=\"/*:Item/Quantity = '10'\">\r\n                    <Interface>\r\n                        <Index>1</Index>\r\n                        <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx1</Service>\r\n                    </Interface>\r\n                </xsl:if>\r\n                <xsl:if test=\"/*:Item/CurrencyCode = 'EUR'\">\r\n                    <Interface>\r\n                        <Index>2</Index>\r\n                        <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx2</Service>\r\n                    </Interface>\r\n                </xsl:if>\r\n                <xsl:if test=\"/*:Item/Quantity != '10'\">\r\n                    <Interface>\r\n                        <Index>3</Index>\r\n                        <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx3</Service>\r\n                    </Interface>\r\n                </xsl:if>\r\n                </Interfaces>\r\n            </Receiver>\r\n        </xsl:if>\r\n        <xsl:if test=\"(/*:Item/Category = 'Keyboards') or (/*:Item/Category = 'Software')\">\r\n            <Receiver>\r\n                <Service>{{receiver_2}}</Service>\r\n                <Interfaces>\r\n                <xsl:if test=\"$dc_country = 'DE'\">\r\n                    <Interface>\r\n                        <Index>1</Index>\r\n                        <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_2}}/IfIdx1</Service>\r\n                    </Interface>\r\n                </xsl:if>\r\n                <xsl:if test=\"$dc_country != 'DE'\">\r\n                    <Interface>\r\n                        <Index>2</Index>\r\n                        <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_2}}/IfIdx2</Service>\r\n                    </Interface>\r\n                </xsl:if>\r\n                </Interfaces>\r\n            </Receiver>\r\n        </xsl:if>\r\n        <xsl:if test=\"(/*:Item/Category = 'Keyboards') and (/*:Item/ProductName != 'XXXX')\">\r\n            <Receiver>\r\n                <Service>{{receiver_3}}</Service>\r\n                <Interfaces>\r\n                <xsl:if test=\"/*:Item/Quantity = '10'\">\r\n                    <Interface>\r\n                        <Index>1</Index>\r\n                        <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_3}}/IfIdx1</Service>\r\n                    </Interface>\r\n                </xsl:if>\r\n                <xsl:if test=\"/*:Item/CurrencyCode = 'EUR'\">\r\n                    <Interface>\r\n                        <Index>2</Index>\r\n                        <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_3}}/IfIdx2</Service>\r\n                    </Interface>\r\n                </xsl:if>\r\n                <xsl:if test=\"/*:Item/Quantity != '10'\">\r\n                    <Interface>\r\n                        <Index>3</Index>\r\n                        <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_3}}/IfIdx3</Service>\r\n                    </Interface>\r\n                </xsl:if>\r\n                </Interfaces>\r\n            </Receiver>\r\n        </xsl:if>\r\n    </ns0:Receivers>\r\n\t</xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read InboundConversionEndpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='InboundConversionEndpoint')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='InboundConversionEndpoint')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean up Partner Directory",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{pid}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{pid}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trigger sample messages",
					"item": [
						{
							"name": "Send Order Software - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "xPipeline",
										"value": "false",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:Item\":{\r\n        \"@PurchaseOrderNumber\":\"1A9201\",\r\n        \"@OrderDate\":\"2019-05-06\",\r\n        \"@ItemNumber\":\"10\",\r\n        \"ProductId\":\"HT-XXXX\",\r\n        \"ProductName\":\"XXXX\",\r\n        \"Category\":\"Software\",\r\n        \"Quantity\":\"10\",\r\n        \"CurrencyCode\":\"EUR\",\r\n        \"Price\":\"799.00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}?country=DE",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									],
									"query": [
										{
											"key": "country",
											"value": "DE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order Keyboards - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "xPipeline",
										"value": "false",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:Item\":{\r\n        \"@PurchaseOrderNumber\":\"1A9202\",\r\n        \"@OrderDate\":\"2019-05-06\",\r\n        \"@ItemNumber\":\"10\",\r\n        \"ProductId\":\"HT-0001\",\r\n        \"ProductName\":\"Smart Keyboards\",\r\n        \"Category\":\"Keyboards\",\r\n        \"Quantity\":\"10\",\r\n        \"CurrencyCode\":\"EUR\",\r\n        \"Price\":\"799.00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}?country=US",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									],
									"query": [
										{
											"key": "country",
											"value": "US"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order SoftwareX - ReceiverNotFound Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "xPipeline",
										"value": "false",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:Item\":{\r\n        \"@PurchaseOrderNumber\":\"1A9203\",\r\n        \"@OrderDate\":\"2019-05-06\",\r\n        \"@ItemNumber\":\"10\",\r\n        \"ProductId\":\"HT-XXXX\",\r\n        \"ProductName\":\"XXXX\",\r\n        \"Category\":\"SoftwareX\",\r\n        \"Quantity\":\"10\",\r\n        \"CurrencyCode\":\"EUR\",\r\n        \"Price\":\"799.00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}?country=DE",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									],
									"query": [
										{
											"key": "country",
											"value": "DE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order Software - InboundConversion Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "xPipeline",
										"value": "false",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:Item\":{\r\n        \"@PurchaseOrderNumber\":\"1A9204\",\r\n        \"@OrderDate\":\"2019-05-06\",\r\n        \"@ItemNumber\":\"10\",\r\n        \"ProductId\":\"HT-XXXX\",\r\n        \"ProductName\":\"XXXX\",\r\n        \"Category\":\"Software\",\r\n        \"Quantity\":\"10\",\r\n        \"CurrencyCode\":\"EUR\",\r\n        \"Price\":\"799.00\"\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}?country=DE&simulateError=true",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									],
									"query": [
										{
											"key": "country",
											"value": "DE"
										},
										{
											"key": "simulateError",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order Software - InboundConversion Error testMode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "testMode",
										"value": "true",
										"type": "text"
									},
									{
										"key": "xPipeline",
										"value": "false",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:Item\":{\r\n        \"@PurchaseOrderNumber\":\"1A9205\",\r\n        \"@OrderDate\":\"2019-05-06\",\r\n        \"@ItemNumber\":\"10\",\r\n        \"ProductId\":\"HT-XXXX\",\r\n        \"ProductName\":\"XXXX\",\r\n        \"Category\":\"Software\",\r\n        \"Quantity\":\"10\",\r\n        \"CurrencyCode\":\"EUR\",\r\n        \"Price\":\"799.00\"\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}?country=DE&simulateError=true",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									],
									"query": [
										{
											"key": "country",
											"value": "DE"
										},
										{
											"key": "simulateError",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Sample scenario with multiple receivers (Recipient List) and multiple interfaces (Interface Split)\n\n- Receiver determination xpath based on Category and Product Name\n- Interface determination xpath based on Quantity and Currency code\n- Use receiver specific outbound queue for receiver 1\n- Use inbound conversion to map from JSON to XML\n- Use alternative partner to map sender and sender interface to scenario name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"scenario\", \"Scenario_1\");",
							"pm.collectionVariables.set(\"pid\", \"PIP_Samples_Scenario_1A\");",
							"pm.collectionVariables.set(\"sender\", \"Sender_1A\");",
							"pm.collectionVariables.set(\"interface\", \"PurchaseOrderItem.Create\");",
							"pm.collectionVariables.set(\"receiver_1\", \"Receiver_11\");",
							"pm.collectionVariables.set(\"receiver_2\", \"Receiver_12\");",
							"pm.collectionVariables.set(\"receiver_3\", \"Receiver_13\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scenario 2 - IF Split with Multi Mapping",
			"item": [
				{
					"name": "Setup Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID for S1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender_1}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID for S2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender_2}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID for S3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender_3}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Receivers xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <ReceiverNotDetermined>\r\n                <Type>Default</Type>\r\n                <DefaultReceiver>\r\n                    <Service>{{receiver_1}}</Service>\r\n                </DefaultReceiver>\r\n            </ReceiverNotDetermined>\r\n            <xsl:if test=\"/*:Order/Supplier = 'ABCD'\">\r\n                <Receiver>\r\n                    <Service>{{receiver_1}}</Service>\r\n                </Receiver>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:Order/Supplier != 'ABCD'\">\r\n                <Receiver>\r\n                    <Service>{{receiver_2}}</Service>\r\n                </Receiver>\r\n            </xsl:if>\r\n        </ns0:Receivers>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interfaceDetermination XSLT for R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_1}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <xsl:if test=\"/*:Order/Country = 'DE'\">\r\n                <Interface>\r\n                    <Index>1</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx1</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:Order/Country != 'DE'\">\r\n                <Interface>\r\n                    <Index>2</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx2</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interfaceDetermination XSLT for R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_2}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <xsl:if test=\"/*:Order/Country = 'DE'\">\r\n                <Interface>\r\n                    <Index>1</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_2}}/IfIdx1</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:Order/Country != 'DE'\">\r\n                <Interface>\r\n                    <Index>2</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_2}}/IfIdx2</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner S1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender_1}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender_1}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner S2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender_2}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender_2}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner S3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender_3}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender_3}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read interfaceDetermination XSLT for R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_1}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read interfaceDetermination XSLT for R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_2}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Receivers xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <ReceiverNotDetermined>\r\n                <Type>Error</Type>\r\n            </ReceiverNotDetermined>\r\n            <xsl:if test=\"/*:Order/Supplier = 'ABCD'\">\r\n                <Receiver>\r\n                    <Service>{{receiver_1}}</Service>\r\n                </Receiver>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:Order/Supplier != 'ABCD'\">\r\n                <Receiver>\r\n                    <Service>{{receiver_2}}</Service>\r\n                </Receiver>\r\n            </xsl:if>\r\n        </ns0:Receivers>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update interfaceDetermination XSLT for R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_1}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <xsl:if test=\"/*:Order/Country = 'US'\">\r\n                <Interface>\r\n                    <Index>1</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_2}}/IfIdx1</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:Order/Country != 'US'\">\r\n                <Interface>\r\n                    <Index>2</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_2}}/IfIdx2</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update interfaceDetermination XSLT for R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_2}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <xsl:if test=\"/*:Order/Country = 'US'\">\r\n                <Interface>\r\n                    <Index>1</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_2}}/IfIdx1</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:Order/Country != 'US'\">\r\n                <Interface>\r\n                    <Index>2</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_2}}/IfIdx2</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean up Partner Directory",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{pid}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{pid}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trigger sample messages",
					"item": [
						{
							"name": "Send Order ABCD DE - XI Sender S1 Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender_1}}",
										"type": "text"
									},
									{
										"key": "interface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "namespace",
										"value": "{{namespace}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version='1.0' encoding='UTF-8'?>\r\n<ns0:Order xmlns:ns0=\"http://demo.sap.com/eip/recipient-list\" PurchaseOrderNumber=\"28001\" OrderDate=\"2019-05-06\">\r\n    <Supplier>ABCD</Supplier>\r\n    <Country>DE</Country>\r\n    <Item ItemNumber=\"10\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1001</ProductId>\r\n        <ProductName>Word</ProductName>\r\n        <Category>Software</Category>\r\n        <Quantity>10</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>799.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"20\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1002</ProductId>\r\n        <ProductName>Gaming Keyboard XXL</ProductName>\r\n        <Category>Keyboards</Category>\r\n        <Quantity>4</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>100.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"30\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n            <ProductId>HT-1003</ProductId>\r\n            <ProductName>Lenovo</ProductName>\r\n            <Category>Notebooks</Category>\r\n            <Quantity>2</Quantity>\r\n            <CurrencyCode>EUR</CurrencyCode>\r\n            <Price>899.00</Price>\r\n    </Item>\r\n</ns0:Order>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/MockedXISender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"MockedXISender"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order XXXX DE - XI Sender S2 Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender_2}}",
										"type": "text"
									},
									{
										"key": "interface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "namespace",
										"value": "{{namespace}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version='1.0' encoding='UTF-8'?>\r\n<ns0:Order xmlns:ns0=\"http://demo.sap.com/eip/recipient-list\" PurchaseOrderNumber=\"28002\" OrderDate=\"2019-05-06\">\r\n    <Supplier>XXXX</Supplier>\r\n    <Country>DE</Country>\r\n    <Item ItemNumber=\"10\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1001</ProductId>\r\n        <ProductName>Word</ProductName>\r\n        <Category>Software</Category>\r\n        <Quantity>10</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>799.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"20\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1002</ProductId>\r\n        <ProductName>Gaming Keyboard XXL</ProductName>\r\n        <Category>Keyboards</Category>\r\n        <Quantity>4</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>100.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"30\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n            <ProductId>HT-1003</ProductId>\r\n            <ProductName>Lenovo</ProductName>\r\n            <Category>Notebooks</Category>\r\n            <Quantity>2</Quantity>\r\n            <CurrencyCode>EUR</CurrencyCode>\r\n            <Price>899.00</Price>\r\n    </Item>\r\n</ns0:Order>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/MockedXISender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"MockedXISender"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order XXXX US - XI Sender S3 Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender_3}}",
										"type": "text"
									},
									{
										"key": "interface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "namespace",
										"value": "{{namespace}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version='1.0' encoding='UTF-8'?>\r\n<ns0:Order xmlns:ns0=\"http://demo.sap.com/eip/recipient-list\" PurchaseOrderNumber=\"28003\" OrderDate=\"2019-05-06\">\r\n    <Supplier>XXXX</Supplier>\r\n    <Country>US</Country>\r\n    <Item ItemNumber=\"10\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1001</ProductId>\r\n        <ProductName>Word</ProductName>\r\n        <Category>Software</Category>\r\n        <Quantity>10</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>799.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"20\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1002</ProductId>\r\n        <ProductName>Gaming Keyboard XXL</ProductName>\r\n        <Category>Keyboards</Category>\r\n        <Quantity>4</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>100.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"30\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n            <ProductId>HT-1003</ProductId>\r\n            <ProductName>Lenovo</ProductName>\r\n            <Category>Notebooks</Category>\r\n            <Quantity>2</Quantity>\r\n            <CurrencyCode>EUR</CurrencyCode>\r\n            <Price>899.00</Price>\r\n    </Item>\r\n</ns0:Order>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/MockedXISender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"MockedXISender"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Sample scenario with 1:n message mappings, XI inbound, and sender wildcard\n\n- 1:n message mapping with one single message type items\n- 1:n message mapping with two message types header and items\n- Use XI protocol on sender side\n- Support for wildcard sender via alternative partner",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"scenario\", \"Scenario_2\");",
							"pm.collectionVariables.set(\"sender_1\", \"Sender_21\");",
							"pm.collectionVariables.set(\"sender_2\", \"Sender_22\");",
							"pm.collectionVariables.set(\"sender_3\", \"Sender_23\");",
							"pm.collectionVariables.set(\"interface\", \"PurchaseOrder.Create\");",
							"pm.collectionVariables.set(\"namespace\", \"http://demo.sap.com/eip/recipient-list\");",
							"pm.collectionVariables.set(\"receiver_1\", \"Receiver_21\");",
							"pm.collectionVariables.set(\"receiver_2\", \"Receiver_22\");",
							"pm.collectionVariables.set(\"pid\", \"PIP_Samples_\"+pm.collectionVariables.get(\"scenario\"));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scenario 2A - Bypass Interface Determination",
			"item": [
				{
					"name": "Setup Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Receivers xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <ReceiverNotDetermined>\r\n                <Type>Default</Type>\r\n                <DefaultReceiver>\r\n                    <Service>{{receiver_1}}</Service>\r\n                    <Interfaces>\r\n                        <Interface>\r\n                            <Index>1</Index>\r\n                            <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx1</Service>\r\n                        </Interface>\r\n                    </Interfaces>\r\n                </DefaultReceiver>\r\n            </ReceiverNotDetermined>\r\n            <xsl:if test=\"/*:Order/Supplier = 'ABCD'\">\r\n                <Receiver>\r\n                    <Service>{{receiver_1}}</Service>\r\n                    <Interfaces>\r\n                        <Interface>\r\n                            <Index>1</Index>\r\n                            <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx1</Service>\r\n                        </Interface>\r\n                    </Interfaces>\r\n                </Receiver>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:Order/Supplier = 'EFGH'\">\r\n                <Receiver>\r\n                    <Service>{{receiver_2}}</Service>\r\n                    <Interfaces/>\r\n                </Receiver>\r\n            </xsl:if>\r\n        </ns0:Receivers>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interfaceDetermination XSLT for R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_2}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <xsl:if test=\"/*:Order/Country = 'DE'\">\r\n                <Interface>\r\n                    <Index>1</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_2}}/IfIdx1</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:Order/Country != 'DE'\">\r\n                <Interface>\r\n                    <Index>2</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_2}}/IfIdx2</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partners",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Pid eq '{{pid}}'",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Pid eq '{{pid}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read interfaceDetermination XSLT for R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_2}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean up Partner Directory",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{pid}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{pid}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trigger sample messages",
					"item": [
						{
							"name": "Send Order ABCD to R1 bypass option",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "interface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "namespace",
										"value": "{{namespace}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version='1.0' encoding='UTF-8'?>\r\n<ns0:Order xmlns:ns0=\"http://demo.sap.com/eip/recipient-list\" PurchaseOrderNumber=\"2A8001\" OrderDate=\"2019-05-06\">\r\n    <Supplier>ABCD</Supplier>\r\n    <Country>DE</Country>\r\n    <Item ItemNumber=\"10\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1001</ProductId>\r\n        <ProductName>Word</ProductName>\r\n        <Category>Software</Category>\r\n        <Quantity>10</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>799.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"20\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1002</ProductId>\r\n        <ProductName>Gaming Keyboard XXL</ProductName>\r\n        <Category>Keyboards</Category>\r\n        <Quantity>4</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>100.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"30\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n            <ProductId>HT-1003</ProductId>\r\n            <ProductName>Lenovo</ProductName>\r\n            <Category>Notebooks</Category>\r\n            <Quantity>2</Quantity>\r\n            <CurrencyCode>EUR</CurrencyCode>\r\n            <Price>899.00</Price>\r\n    </Item>\r\n</ns0:Order>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/MockedXISender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"MockedXISender"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order XXXX to Default bypass option",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "interface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "namespace",
										"value": "{{namespace}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version='1.0' encoding='UTF-8'?>\r\n<ns0:Order xmlns:ns0=\"http://demo.sap.com/eip/recipient-list\" PurchaseOrderNumber=\"2A8002\" OrderDate=\"2019-05-06\">\r\n    <Supplier>XXXX</Supplier>\r\n    <Country>DE</Country>\r\n    <Item ItemNumber=\"10\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1001</ProductId>\r\n        <ProductName>Word</ProductName>\r\n        <Category>Software</Category>\r\n        <Quantity>10</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>799.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"20\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1002</ProductId>\r\n        <ProductName>Gaming Keyboard XXL</ProductName>\r\n        <Category>Keyboards</Category>\r\n        <Quantity>4</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>100.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"30\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n            <ProductId>HT-1003</ProductId>\r\n            <ProductName>Lenovo</ProductName>\r\n            <Category>Notebooks</Category>\r\n            <Quantity>2</Quantity>\r\n            <CurrencyCode>EUR</CurrencyCode>\r\n            <Price>899.00</Price>\r\n    </Item>\r\n</ns0:Order>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/MockedXISender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"MockedXISender"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order EFGH DE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "interface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "namespace",
										"value": "{{namespace}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version='1.0' encoding='UTF-8'?>\r\n<ns0:Order xmlns:ns0=\"http://demo.sap.com/eip/recipient-list\" PurchaseOrderNumber=\"2A8003\" OrderDate=\"2019-05-06\">\r\n    <Supplier>EFGH</Supplier>\r\n    <Country>DE</Country>\r\n    <Item ItemNumber=\"10\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1001</ProductId>\r\n        <ProductName>Word</ProductName>\r\n        <Category>Software</Category>\r\n        <Quantity>10</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>799.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"20\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1002</ProductId>\r\n        <ProductName>Gaming Keyboard XXL</ProductName>\r\n        <Category>Keyboards</Category>\r\n        <Quantity>4</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>100.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"30\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n            <ProductId>HT-1003</ProductId>\r\n            <ProductName>Lenovo</ProductName>\r\n            <Category>Notebooks</Category>\r\n            <Quantity>2</Quantity>\r\n            <CurrencyCode>EUR</CurrencyCode>\r\n            <Price>899.00</Price>\r\n    </Item>\r\n</ns0:Order>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/MockedXISender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"MockedXISender"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order EFGH US",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "interface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "namespace",
										"value": "{{namespace}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version='1.0' encoding='UTF-8'?>\r\n<ns0:Order xmlns:ns0=\"http://demo.sap.com/eip/recipient-list\" PurchaseOrderNumber=\"2A8004\" OrderDate=\"2019-05-06\">\r\n    <Supplier>EFGH</Supplier>\r\n    <Country>US</Country>\r\n    <Item ItemNumber=\"10\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1001</ProductId>\r\n        <ProductName>Word</ProductName>\r\n        <Category>Software</Category>\r\n        <Quantity>10</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>799.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"20\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1002</ProductId>\r\n        <ProductName>Gaming Keyboard XXL</ProductName>\r\n        <Category>Keyboards</Category>\r\n        <Quantity>4</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>100.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"30\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n            <ProductId>HT-1003</ProductId>\r\n            <ProductName>Lenovo</ProductName>\r\n            <Category>Notebooks</Category>\r\n            <Quantity>2</Quantity>\r\n            <CurrencyCode>EUR</CurrencyCode>\r\n            <Price>899.00</Price>\r\n    </Item>\r\n</ns0:Order>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/MockedXISender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"MockedXISender"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Similar scenario like scenario 2 except that for one receiver the interface determination is bypassed\n\n- Scenario-specific integration flows of scenario 2 can be reused\n- However, for receiver 1 only one interface index defined (no interface condition), so interface can be maintained in receiver determination XSLT which allows to bypass the interface determination pipeline step\n- For receiver 2, interface determination XSLT is still defined",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"scenario\", \"Scenario_2\");",
							"pm.collectionVariables.set(\"pid\", \"PIP_Samples_Scenario_2A\");",
							"pm.collectionVariables.set(\"sender\", \"Sender_2A\");",
							"pm.collectionVariables.set(\"interface\", \"PurchaseOrder.Create\");",
							"pm.collectionVariables.set(\"namespace\", \"http://demo.sap.com/eip/recipient-list\");",
							"pm.collectionVariables.set(\"receiver_1\", \"Receiver_21\");",
							"pm.collectionVariables.set(\"receiver_2\", \"Receiver_22\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scenario 2B - Bypass Receiver Determination",
			"item": [
				{
					"name": "Setup Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create receiverDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"receiverDetermination\",\r\n\t\"Value\": \"{{receiver}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interfaceDetermination XSLT for R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <xsl:if test=\"/*:Order/Country = 'DE'\">\r\n                <Interface>\r\n                    <Index>1</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver}}/IfIdx1</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:Order/Country != 'DE'\">\r\n                <Interface>\r\n                    <Index>2</Index>\r\n                    <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver}}/IfIdx2</Service>\r\n                </Interface>\r\n            </xsl:if>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read receiverDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='receiverDetermination')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='receiverDetermination')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read interfaceDetermination XSLT for R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean up Partner Directory",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{pid}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{pid}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trigger sample messages",
					"item": [
						{
							"name": "Send Order DE - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "interface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "namespace",
										"value": "{{namespace}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version='1.0' encoding='UTF-8'?>\r\n<ns0:Order xmlns:ns0=\"http://demo.sap.com/eip/recipient-list\" PurchaseOrderNumber=\"2B8001\" OrderDate=\"2019-05-06\">\r\n    <Supplier>ABCD</Supplier>\r\n    <Country>DE</Country>\r\n    <Item ItemNumber=\"10\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1001</ProductId>\r\n        <ProductName>Word</ProductName>\r\n        <Category>Software</Category>\r\n        <Quantity>10</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>799.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"20\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1002</ProductId>\r\n        <ProductName>Gaming Keyboard XXL</ProductName>\r\n        <Category>Keyboards</Category>\r\n        <Quantity>4</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>100.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"30\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n            <ProductId>HT-1003</ProductId>\r\n            <ProductName>Lenovo</ProductName>\r\n            <Category>Notebooks</Category>\r\n            <Quantity>2</Quantity>\r\n            <CurrencyCode>EUR</CurrencyCode>\r\n            <Price>899.00</Price>\r\n    </Item>\r\n</ns0:Order>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/MockedXISender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"MockedXISender"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order US - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "interface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "namespace",
										"value": "{{namespace}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version='1.0' encoding='UTF-8'?>\r\n<ns0:Order xmlns:ns0=\"http://demo.sap.com/eip/recipient-list\" PurchaseOrderNumber=\"2B8003\" OrderDate=\"2019-05-06\">\r\n    <Supplier>XXXX</Supplier>\r\n    <Country>US</Country>\r\n    <Item ItemNumber=\"10\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1001</ProductId>\r\n        <ProductName>Word</ProductName>\r\n        <Category>Software</Category>\r\n        <Quantity>10</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>799.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"20\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1002</ProductId>\r\n        <ProductName>Gaming Keyboard XXL</ProductName>\r\n        <Category>Keyboards</Category>\r\n        <Quantity>4</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>100.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"30\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n            <ProductId>HT-1003</ProductId>\r\n            <ProductName>Lenovo</ProductName>\r\n            <Category>Notebooks</Category>\r\n            <Quantity>2</Quantity>\r\n            <CurrencyCode>EUR</CurrencyCode>\r\n            <Price>899.00</Price>\r\n    </Item>\r\n</ns0:Order>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/MockedXISender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"MockedXISender"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Similar scenario like scenario 2 except that the receiver determination is bypassed\n\n- Scenario-specific integration flows of scenario 2 can be reused\n- However, we stick to one receiver only, so receiver determination pipeline step can be bypassed\n    \n- For the receiver, interface determination is carried out",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"scenario\", \"Scenario_2\");",
							"pm.collectionVariables.set(\"pid\", \"PIP_Samples_Scenario_2B\");",
							"pm.collectionVariables.set(\"sender\", \"Sender_2B\");",
							"pm.collectionVariables.set(\"interface\", \"PurchaseOrder.Create\");",
							"pm.collectionVariables.set(\"namespace\", \"http://demo.sap.com/eip/recipient-list\");",
							"pm.collectionVariables.set(\"receiver\", \"Receiver_21\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scenario 2C - Custom Extension for Interface Determination",
			"item": [
				{
					"name": "Setup Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create receiverDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"receiverDetermination\",\r\n\t\"Value\": \"{{receiver}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CustomXIDEndpoint",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"CustomXIDEndpoint\",\r\n\t\"Value\": \"/PIP/Step05/Samples/{{scenario}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read receiverDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='receiverDetermination')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='receiverDetermination')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read CustomXIDEndpoint",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='CustomXIDEndpoint')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='CustomXIDEndpoint')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean up Partner Directory",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{pid}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{pid}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trigger sample messages",
					"item": [
						{
							"name": "Send Order DE - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "interface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "namespace",
										"value": "{{namespace}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version='1.0' encoding='UTF-8'?>\r\n<ns0:Order xmlns:ns0=\"http://demo.sap.com/eip/recipient-list\" PurchaseOrderNumber=\"2C8001\" OrderDate=\"2019-05-06\">\r\n    <Supplier>ABCD</Supplier>\r\n    <Country>DE</Country>\r\n    <Item ItemNumber=\"10\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1001</ProductId>\r\n        <ProductName>Word</ProductName>\r\n        <Category>Software</Category>\r\n        <Quantity>10</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>799.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"20\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1002</ProductId>\r\n        <ProductName>Gaming Keyboard XXL</ProductName>\r\n        <Category>Keyboards</Category>\r\n        <Quantity>4</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>100.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"30\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n            <ProductId>HT-1003</ProductId>\r\n            <ProductName>Lenovo</ProductName>\r\n            <Category>Notebooks</Category>\r\n            <Quantity>2</Quantity>\r\n            <CurrencyCode>EUR</CurrencyCode>\r\n            <Price>899.00</Price>\r\n    </Item>\r\n</ns0:Order>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/MockedXISender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"MockedXISender"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order US - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "interface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "namespace",
										"value": "{{namespace}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version='1.0' encoding='UTF-8'?>\r\n<ns0:Order xmlns:ns0=\"http://demo.sap.com/eip/recipient-list\" PurchaseOrderNumber=\"2C8003\" OrderDate=\"2019-05-06\">\r\n    <Supplier>XXXX</Supplier>\r\n    <Country>US</Country>\r\n    <Item ItemNumber=\"10\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1001</ProductId>\r\n        <ProductName>Word</ProductName>\r\n        <Category>Software</Category>\r\n        <Quantity>10</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>799.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"20\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1002</ProductId>\r\n        <ProductName>Gaming Keyboard XXL</ProductName>\r\n        <Category>Keyboards</Category>\r\n        <Quantity>4</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>100.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"30\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n            <ProductId>HT-1003</ProductId>\r\n            <ProductName>Lenovo</ProductName>\r\n            <Category>Notebooks</Category>\r\n            <Quantity>2</Quantity>\r\n            <CurrencyCode>EUR</CurrencyCode>\r\n            <Price>899.00</Price>\r\n    </Item>\r\n</ns0:Order>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/MockedXISender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"MockedXISender"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Scenario with one receiver and multiple interfaces using custom interface determination instead of XSLT\n\n- Similar scenario like scenario 2 and 2B so scenario-specific integration flows of scenario 2 can be reused\n    \n- Like in scenario 2B, we stick to one receiver only, so receiver determination pipeline step can be bypassed\n    \n- For the receiver, interface determination is carried out calling an integration flow via ProcessDirect instead of the XSLT from the Partner Directory",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"scenario\", \"Scenario_2C\");",
							"pm.collectionVariables.set(\"pid\", \"PIP_Samples_Scenario_2C\");",
							"pm.collectionVariables.set(\"sender\", \"Sender_2C\");",
							"pm.collectionVariables.set(\"interface\", \"PurchaseOrder.Create\");",
							"pm.collectionVariables.set(\"namespace\", \"http://demo.sap.com/eip/recipient-list\");",
							"pm.collectionVariables.set(\"receiver\", \"Receiver_21\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scenario 2D - Integrated Messaging Runtime",
			"item": [
				{
					"name": "Setup Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Sender 1 DEV to Sender 1 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"DEV\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{sender_d_1}}\",\r\n  \"Pid\": \"{{sender_a_1}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Sender 1 QA to Sender 1 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"QA\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{sender_q_1}}\",\r\n  \"Pid\": \"{{sender_a_1}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Sender 1 PRD to Sender 1 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"PRD\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{sender_p_1}}\",\r\n  \"Pid\": \"{{sender_a_1}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Sender 2 DEV to Sender 2 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"DEV\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{sender_d_2}}\",\r\n  \"Pid\": \"{{sender_a_2}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Sender 2 QA to Sender 2 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"QA\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{sender_q_2}}\",\r\n  \"Pid\": \"{{sender_a_2}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Sender 2 PRD to Sender 2 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"PRD\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{sender_p_2}}\",\r\n  \"Pid\": \"{{sender_a_2}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Receiver 1 DEV to Receiver 1 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"DEV\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{receiver_d_1}}\",\r\n  \"Pid\": \"{{receiver_a_1}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Receiver 1 QA to Receiver 1 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"QA\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{receiver_q_1}}\",\r\n  \"Pid\": \"{{receiver_a_1}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Receiver 1 PRD to Receiver 1 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"PRD\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{receiver_p_1}}\",\r\n  \"Pid\": \"{{receiver_a_1}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Receiver 2 DEV to Receiver 2 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"DEV\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{receiver_d_2}}\",\r\n  \"Pid\": \"{{receiver_a_2}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Receiver 2 QA to Receiver 2 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"QA\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{receiver_q_2}}\",\r\n  \"Pid\": \"{{receiver_a_2}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Receiver 2 PRD to Receiver 2 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"PRD\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{receiver_p_2}}\",\r\n  \"Pid\": \"{{receiver_a_2}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID for Sender 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender_a_1}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID for Sender 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender_a_2}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create InboundQueue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"InboundQueue\",\r\n\t\"Value\": \"PIPX01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create InboundConversionEndpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"InboundConversionEndpoint\",\r\n\t\"Value\": \"/PIP/Step03/Samples/{{scenario}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Receivers xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <ReceiverNotDetermined>\r\n                <Type>Default</Type>\r\n                <DefaultReceiver>\r\n                    <Service>{{receiver_a_1}}</Service>\r\n                    <Interfaces>\r\n                    <xsl:if test=\"/*:Order/Country = 'DE'\">\r\n                        <Interface>\r\n                            <Index>1</Index>\r\n                            <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx1</Service>\r\n                        </Interface>\r\n                    </xsl:if>\r\n                    <xsl:if test=\"/*:Order/Country != 'DE'\">\r\n                        <Interface>\r\n                            <Index>2</Index>\r\n                            <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx2</Service>\r\n                        </Interface>\r\n                    </xsl:if>\r\n                    </Interfaces>\r\n                </DefaultReceiver>\r\n            </ReceiverNotDetermined>\r\n            <xsl:if test=\"/*:Order/Supplier = 'ABCD'\">\r\n                <Receiver>\r\n                    <Service>{{receiver_a_1}}</Service>\r\n                    <Interfaces>\r\n                    <xsl:if test=\"/*:Order/Country = 'DE'\">\r\n                        <Interface>\r\n                            <Index>1</Index>\r\n                            <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx1</Service>\r\n                        </Interface>\r\n                    </xsl:if>\r\n                    <xsl:if test=\"/*:Order/Country != 'DE'\">\r\n                        <Interface>\r\n                            <Index>2</Index>\r\n                            <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx2</Service>\r\n                        </Interface>\r\n                    </xsl:if>\r\n                    </Interfaces>\r\n                </Receiver>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:Order/Supplier = 'EFGH'\">\r\n                <Receiver>\r\n                    <Service>{{receiver_a_2}}</Service>\r\n                    <Interfaces>\r\n                    <xsl:if test=\"/*:Order/Country = 'DE'\">\r\n                        <Interface>\r\n                            <Index>1</Index>\r\n                            <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_2}}/IfIdx1</Service>\r\n                        </Interface>\r\n                    </xsl:if>\r\n                    <xsl:if test=\"/*:Order/Country != 'DE'\">\r\n                        <Interface>\r\n                            <Index>2</Index>\r\n                            <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_2}}/IfIdx2</Service>\r\n                        </Interface>\r\n                    </xsl:if>\r\n                    </Interfaces>\r\n                </Receiver>\r\n            </xsl:if>\r\n        </ns0:Receivers>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read all Partners",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner S1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender_a_1}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender_a_1}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner S2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender_a_2}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender_a_2}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read InboundQueue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='InboundQueue')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='InboundQueue')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read InboundConversionEndpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='InboundConversionEndpoint')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='InboundConversionEndpoint')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean up Partner Directory",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Sender 1 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{sender_a_1}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{sender_a_1}}')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Sender 2 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{sender_a_2}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{sender_a_2}}')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Receiver 1 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{receiver_a_1}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{receiver_a_1}}')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Receiver 2 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{receiver_a_2}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{receiver_a_2}}')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{pid}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{pid}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trigger sample messages",
					"item": [
						{
							"name": "Send Order ABCD DE - XI Sender S1 QA Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender_q_1}}",
										"type": "text"
									},
									{
										"key": "interface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "namespace",
										"value": "{{namespace}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version='1.0' encoding='UTF-8'?>\r\n<ns0:Order xmlns:ns0=\"http://demo.sap.com/eip/recipient-list\" PurchaseOrderNumber=\"2D8002\" OrderDate=\"2019-05-06\">\r\n    <Supplier>ABCD</Supplier>\r\n    <Country>DE</Country>\r\n    <Item ItemNumber=\"10\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1001</ProductId>\r\n        <ProductName>Word</ProductName>\r\n        <Category>Software</Category>\r\n        <Quantity>10</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>799.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"20\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1002</ProductId>\r\n        <ProductName>Excel</ProductName>\r\n        <Category>Software</Category>\r\n        <Quantity>4</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>100.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"30\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n            <ProductId>HT-1003</ProductId>\r\n            <ProductName>Lenovo</ProductName>\r\n            <Category>Notebooks</Category>\r\n            <Quantity>2</Quantity>\r\n            <CurrencyCode>EUR</CurrencyCode>\r\n            <Price>899.00</Price>\r\n    </Item>\r\n</ns0:Order>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/MockedXISender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"MockedXISender"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order EFGH DE - XI Sender S2 QA Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender_q_2}}",
										"type": "text"
									},
									{
										"key": "interface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "namespace",
										"value": "{{namespace}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version='1.0' encoding='UTF-8'?>\r\n<ns0:Order xmlns:ns0=\"http://demo.sap.com/eip/recipient-list\" PurchaseOrderNumber=\"2D8002\" OrderDate=\"2019-05-06\">\r\n    <Supplier>EFGH</Supplier>\r\n    <Country>DE</Country>\r\n    <Item ItemNumber=\"10\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1001</ProductId>\r\n        <ProductName>Word</ProductName>\r\n        <Category>Software</Category>\r\n        <Quantity>10</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>799.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"20\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1002</ProductId>\r\n        <ProductName>Excel</ProductName>\r\n        <Category>Software</Category>\r\n        <Quantity>4</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>100.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"30\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n            <ProductId>HT-1003</ProductId>\r\n            <ProductName>Lenovo</ProductName>\r\n            <Category>Notebooks</Category>\r\n            <Quantity>2</Quantity>\r\n            <CurrencyCode>EUR</CurrencyCode>\r\n            <Price>899.00</Price>\r\n    </Item>\r\n</ns0:Order>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/MockedXISender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"MockedXISender"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order XXXX US - XI Sender S2 QA Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender_q_2}}",
										"type": "text"
									},
									{
										"key": "interface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "namespace",
										"value": "{{namespace}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version='1.0' encoding='UTF-8'?>\r\n<ns0:Order xmlns:ns0=\"http://demo.sap.com/eip/recipient-list\" PurchaseOrderNumber=\"2D8003\" OrderDate=\"2019-05-06\">\r\n    <Supplier>XXXX</Supplier>\r\n    <Country>US</Country>\r\n    <Item ItemNumber=\"10\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1001</ProductId>\r\n        <ProductName>Word</ProductName>\r\n        <Category>Software</Category>\r\n        <Quantity>10</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>799.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"20\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n        <ProductId>HT-1002</ProductId>\r\n        <ProductName>Software</ProductName>\r\n        <Category>Excel</Category>\r\n        <Quantity>4</Quantity>\r\n        <CurrencyCode>EUR</CurrencyCode>\r\n        <Price>100.00</Price>\r\n    </Item>\r\n    <Item ItemNumber=\"30\" PurchaseOrderNumber=\"\" OrderDate=\"\">\r\n            <ProductId>HT-1003</ProductId>\r\n            <ProductName>Lenovo</ProductName>\r\n            <Category>Notebooks</Category>\r\n            <Quantity>2</Quantity>\r\n            <CurrencyCode>EUR</CurrencyCode>\r\n            <Price>899.00</Price>\r\n    </Item>\r\n</ns0:Order>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/MockedXISender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"MockedXISender"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Similar scenario like scenario 2 except that the integrated messaging runtime is used for a better runtime behavior\n\n- 1:n message mapping with one single message type items\n- 1:n message mapping with two message types header and items\n- Using XI protocol on sender side\n- Support for wildcard sender via alternative partner\n- Support for different tenant stages DEV, QA, PRD by maintaining business systems\n- Using integrated messaging runtime for async message processing",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"scenario\", \"Scenario_2\");",
							"pm.collectionVariables.set(\"receiver_1\", \"Receiver_21\");",
							"pm.collectionVariables.set(\"receiver_2\", \"Receiver_22\");",
							"pm.collectionVariables.set(\"interface\", \"PurchaseOrder.Create\");",
							"pm.collectionVariables.set(\"namespace\", \"http://demo.sap.com/eip/recipient-list\");",
							"pm.collectionVariables.set(\"pid\", \"PIP_Samples_Scenario_2D\");",
							"pm.collectionVariables.set(\"sender_a_1\", \"BS_DD1\");",
							"pm.collectionVariables.set(\"sender_a_2\", \"BS_DD2\")",
							"pm.collectionVariables.set(\"sender_p_1\", \"BS_DD1_P\");",
							"pm.collectionVariables.set(\"sender_p_2\", \"BS_DD2_P\");",
							"pm.collectionVariables.set(\"sender_q_1\", \"BS_DD1_Q\");",
							"pm.collectionVariables.set(\"sender_q_2\", \"BS_DD2_Q\");",
							"pm.collectionVariables.set(\"sender_d_1\", \"BS_DD1_D\");",
							"pm.collectionVariables.set(\"sender_d_2\", \"BS_DD2_D\");",
							"pm.collectionVariables.set(\"receiver_a_1\", \"BS_ERP21\");",
							"pm.collectionVariables.set(\"receiver_a_2\", \"BS_ERP22\");",
							"pm.collectionVariables.set(\"receiver_p_1\", \"BS_ERP21_P\");",
							"pm.collectionVariables.set(\"receiver_p_2\", \"BS_ERP22_P\");",
							"pm.collectionVariables.set(\"receiver_q_1\", \"BS_ERP21_Q\");",
							"pm.collectionVariables.set(\"receiver_q_2\", \"BS_ERP22_Q\");",
							"pm.collectionVariables.set(\"receiver_d_1\", \"BS_ERP21_D\");",
							"pm.collectionVariables.set(\"receiver_d_2\", \"BS_ERP22_D\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scenario 3 - IF Split with Order at Runtime",
			"item": [
				{
					"name": "Setup Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Receivers xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <ReceiverNotDetermined>\r\n                <Type>Ignore</Type>\r\n                <DefaultReceiver/>\r\n            </ReceiverNotDetermined>\r\n            <Receiver>\r\n                <Service>{{receiver}}</Service>\r\n            </Receiver>\r\n        </ns0:Receivers>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interfaceDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <Interface>\r\n                <Index>1</Index>\r\n                <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver}}/eoio</Service>\r\n            </Interface>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read interfaceDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Receivers xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <ReceiverNotDetermined>\r\n                <Type>Ignore</Type>\r\n                <DefaultReceiver/>\r\n            </ReceiverNotDetermined>\r\n            <Receiver>\r\n                <Service>{{receiver}}</Service>\r\n            </Receiver>\r\n        </ns0:Receivers>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update interfaceDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <Interface>\r\n                <Index>1</Index>\r\n                <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver}}/eoio</Service>\r\n            </Interface>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean up Partner Directory",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{pid}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{pid}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trigger sample messages",
					"item": [
						{
							"name": "Send Item Keyboards - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version='1.0' encoding='UTF-8'?>\r\n<ns0:Item xmlns:ns0=\"http://demo.sap.com/eip/recipient-list\" PurchaseOrderNumber=\"37201\" OrderDate=\"2019-05-06\" ItemNumber=\"10\">\r\n<ProductId>HT-XXXX</ProductId>\r\n<ProductName>XXXX</ProductName>\r\n<Category>Keyboards</Category>\r\n<Quantity>10</Quantity>\r\n<CurrencyCode>EUR</CurrencyCode>\r\n<Price>799.00</Price>\r\n</ns0:Item>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Sample scenario with one receiver and two interfaces with maintain order at runtime option\n\n- First, item file should be processed\n    \n- Then a trigger file is written",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"scenario\", \"Scenario_3\");",
							"pm.collectionVariables.set(\"sender\", \"Sender_3\");",
							"pm.collectionVariables.set(\"interface\", \"PurchaseOrderItem\");",
							"pm.collectionVariables.set(\"receiver\", \"Receiver_31\");",
							"pm.collectionVariables.set(\"pid\", \"PIP_Samples_\"+pm.collectionVariables.get(\"scenario\"));",
							"pm.collectionVariables.set(\"pidOld\", pm.collectionVariables.get(\"sender\")+\"~\"+pm.collectionVariables.get(\"interface\"));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scenario 4 -  Reuse Extended Receiver Determination",
			"item": [
				{
					"name": "Setup Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create InboundConversionEndpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"InboundConversionEndpoint\",\r\n\t\"Value\": \"/PIP/Step03/Samples/{{scenario}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"3\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ReuseXRDEndpoint",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"ReuseXRDEndpoint\",\r\n\t\"Value\": \"/PIP/Step04/Samples/{{scenario}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ReceiverNotDeterminedType",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"ReceiverNotDeterminedType\",\r\n\t\"Value\": \"Default\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ReceiverNotDeterminedDefault",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"ReceiverNotDeterminedDefault\",\r\n\t\"Value\": \"{{receiver_1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interfaceDetermination XSLT for R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_1}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <Interface>\r\n                <Index>1</Index>\r\n                <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx1</Service>\r\n            </Interface>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interfaceDetermination XSLT for R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_2}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <Interface>\r\n                <Index>1</Index>\r\n                <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_2}}/IfIdx1</Service>\r\n            </Interface>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interfaceDetermination XSLT for R3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_3}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <Interface>\r\n                <Index>1</Index>\r\n                <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_3}}/IfIdx1</Service>\r\n            </Interface>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read InboundConversionEndpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='InboundConversionEndpoint')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='InboundConversionEndpoint')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read ReuseXRDEndpoint",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='ReuseXRDEndpoint')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='ReuseXRDEndpoint')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read ReceiverNotDeterminedType",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='ReceiverNotDeterminedType')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='ReceiverNotDeterminedType')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read ReceiverNotDeterminedDefault",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='ReceiverNotDeterminedDefault')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='ReceiverNotDeterminedDefault')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read interfaceDetermination XSLT for R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_1}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read interfaceDetermination XSLT for R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_2}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read interfaceDetermination XSLT for R3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_3}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ReceiverNotDeterminedType",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"ReceiverNotDeterminedType\",\r\n\t\"Value\": \"Error\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='ReceiverNotDeterminedType')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='ReceiverNotDeterminedType')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ReceiverNotDeterminedDefault",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"ReceiverNotDeterminedDefault\",\r\n\t\"Value\": \"{{receiver_2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='ReceiverNotDeterminedDefault')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='ReceiverNotDeterminedDefault')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean up Partner Directory Copy",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{pid}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{pid}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trigger sample messages",
					"item": [
						{
							"name": "Send Order Software - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:Item\":{\r\n        \"@PurchaseOrderNumber\":\"40401\",\r\n        \"@OrderDate\":\"2019-05-06\",\r\n        \"@ItemNumber\":\"10\",\r\n        \"ProductId\":\"HT-XXXX\",\r\n        \"ProductName\":\"XXXX\",\r\n        \"Category\":\"Software\",\r\n        \"Quantity\":\"10\",\r\n        \"CurrencyCode\":\"EUR\",\r\n        \"Price\":\"799.00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order Keyboards - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:Item\":{\r\n        \"@PurchaseOrderNumber\":\"40402\",\r\n        \"@OrderDate\":\"2019-05-06\",\r\n        \"@ItemNumber\":\"10\",\r\n        \"ProductId\":\"HT-XXXX\",\r\n        \"ProductName\":\"XXXX\",\r\n        \"Category\":\"Keyboards\",\r\n        \"Quantity\":\"10\",\r\n        \"CurrencyCode\":\"EUR\",\r\n        \"Price\":\"799.00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order Notebooks - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:Item\":{\r\n        \"@PurchaseOrderNumber\":\"40403\",\r\n        \"@OrderDate\":\"2019-05-06\",\r\n        \"@ItemNumber\":\"10\",\r\n        \"ProductId\":\"HT-XXXX\",\r\n        \"ProductName\":\"XXXX\",\r\n        \"Category\":\"Notebooks\",\r\n        \"Quantity\":\"10\",\r\n        \"CurrencyCode\":\"EUR\",\r\n        \"Price\":\"799.00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order Other - Successful Default Receiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:Item\":{\r\n        \"@PurchaseOrderNumber\":\"40404\",\r\n        \"@OrderDate\":\"2019-05-06\",\r\n        \"@ItemNumber\":\"10\",\r\n        \"ProductId\":\"HT-XXXX\",\r\n        \"ProductName\":\"XXXX\",\r\n        \"Category\":\"Other\",\r\n        \"Quantity\":\"10\",\r\n        \"CurrencyCode\":\"EUR\",\r\n        \"Price\":\"799.00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Scenario with multiple receivers and reuse of extended receiver determination mapping instead of XSLT",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"scenario\", \"Scenario_4\");",
							"pm.collectionVariables.set(\"sender\", \"Sender_4\");",
							"pm.collectionVariables.set(\"interface\", \"PurchaseOrderItem.Create\");",
							"pm.collectionVariables.set(\"receiver_1\", \"Receiver_41\");",
							"pm.collectionVariables.set(\"receiver_2\", \"Receiver_42\");",
							"pm.collectionVariables.set(\"receiver_3\", \"Receiver_43\");",
							"pm.collectionVariables.set(\"pid\", \"PIP_Samples_\"+pm.collectionVariables.get(\"scenario\"));",
							"pm.collectionVariables.set(\"pidOld\", pm.collectionVariables.get(\"sender\")+\"~\"+pm.collectionVariables.get(\"interface\"));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scenario 4A -  Custom Extension for Receiver Determination",
			"item": [
				{
					"name": "Setup Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create InboundConversionEndpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"InboundConversionEndpoint\",\r\n\t\"Value\": \"/PIP/Step03/Samples/Scenario_4\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"3\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CustomXRDEndpoint",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"CustomXRDEndpoint\",\r\n\t\"Value\": \"/PIP/Step04/Samples/{{scenario}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read InboundConversionEndpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='InboundConversionEndpoint')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='InboundConversionEndpoint')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read CustomXRDEndpoint",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='CustomXRDEndpoint')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='CustomXRDEndpoint')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean up Partner Directory Copy",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{pid}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{pid}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trigger sample messages",
					"item": [
						{
							"name": "Send Order Software - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "xPipeline",
										"value": "false",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:Item\":{\r\n        \"@PurchaseOrderNumber\":\"4A0401\",\r\n        \"@OrderDate\":\"2019-05-06\",\r\n        \"@ItemNumber\":\"10\",\r\n        \"ProductId\":\"HT-XXXX\",\r\n        \"ProductName\":\"XXXX\",\r\n        \"Category\":\"Software\",\r\n        \"Quantity\":\"10\",\r\n        \"CurrencyCode\":\"EUR\",\r\n        \"Price\":\"799.00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/Scenario_4",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"Scenario_4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order Keyboards - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "xPipeline",
										"value": "false",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:Item\":{\r\n        \"@PurchaseOrderNumber\":\"4A0402\",\r\n        \"@OrderDate\":\"2019-05-06\",\r\n        \"@ItemNumber\":\"10\",\r\n        \"ProductId\":\"HT-XXXX\",\r\n        \"ProductName\":\"XXXX\",\r\n        \"Category\":\"Keyboards\",\r\n        \"Quantity\":\"10\",\r\n        \"CurrencyCode\":\"EUR\",\r\n        \"Price\":\"799.00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/Scenario_4",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"Scenario_4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order Notebooks - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "xPipeline",
										"value": "false",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:Item\":{\r\n        \"@PurchaseOrderNumber\":\"4A0403\",\r\n        \"@OrderDate\":\"2019-05-06\",\r\n        \"@ItemNumber\":\"10\",\r\n        \"ProductId\":\"HT-XXXX\",\r\n        \"ProductName\":\"XXXX\",\r\n        \"Category\":\"Notebooks\",\r\n        \"Quantity\":\"10\",\r\n        \"CurrencyCode\":\"EUR\",\r\n        \"Price\":\"799.00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/Scenario_4",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"Scenario_4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Order Other - Successful Default Receiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "xPipeline",
										"value": "false",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:Item\":{\r\n        \"@PurchaseOrderNumber\":\"4A0404\",\r\n        \"@OrderDate\":\"2019-05-06\",\r\n        \"@ItemNumber\":\"10\",\r\n        \"ProductId\":\"HT-XXXX\",\r\n        \"ProductName\":\"XXXX\",\r\n        \"Category\":\"Other\",\r\n        \"Quantity\":\"10\",\r\n        \"CurrencyCode\":\"EUR\",\r\n        \"Price\":\"799.00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/Scenario_4",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"Scenario_4"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Scenario with multiple receivers and custom receiver determination instead of XSLT\n\n- Similar to scenario 4 hence reusing scenario-specific integration flows from scenario 4\n- Leveraging custom extension via ProcessDirect to carry out the receiver determination\n- One interface per receiver, hence bypassing the interface determination pipeline step",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"scenario\", \"Scenario_4A\");",
							"pm.collectionVariables.set(\"sender\", \"Sender_4A\");",
							"pm.collectionVariables.set(\"interface\", \"PurchaseOrderItem.Create\");",
							"pm.collectionVariables.set(\"receiver_1\", \"Receiver_41\");",
							"pm.collectionVariables.set(\"receiver_2\", \"Receiver_42\");",
							"pm.collectionVariables.set(\"receiver_3\", \"Receiver_43\");",
							"pm.collectionVariables.set(\"pid\", \"PIP_Samples_\"+pm.collectionVariables.get(\"scenario\"));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scenario 5 - Point-to-Point",
			"item": [
				{
					"name": "Setup Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID for S1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender_1}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID for S2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender_2}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create receiverDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"receiverDetermination\",\r\n\t\"Value\": \"{{receiver}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interfaceDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"interfaceDetermination_{{receiver}}\",\r\n\t\"Value\": \"/PIP/Step07/Samples/{{scenario}}/{{receiver}}/IfIdx1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner for S1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender_1}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender_1}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner for S2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender_2}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender_2}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read receiverDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='receiverDetermination')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='receiverDetermination')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read interfaceDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='interfaceDetermination_{{receiver}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='interfaceDetermination_{{receiver}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean up Partner Directory",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{pid}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{pid}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trigger sample messages",
					"item": [
						{
							"name": "Send Sales Order S1 - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender_1}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:pi=\"http://pi-elevation.bootcamp.com\">\r\n    <soapenv:Header/>\r\n    <soapenv:Body>\r\n        <pi:MT_SalesOrder_0001>\r\n            <salesOrder>\r\n                <orderNumber>50001</orderNumber>\r\n                <orderDate>10/01/2023</orderDate>\r\n                <customer>\r\n                    <firstName>Amruta</firstName>\r\n                    <lastName>Kamble</lastName>\r\n                    <street>Hauptstrasse</street>\r\n                    <number>89</number>\r\n                </customer>\r\n                <items>\r\n                    <itemNumber>Test</itemNumber>\r\n                    <material>Test_material</material>\r\n                    <quantity>5</quantity>\r\n                    <price>550</price>\r\n                </items>\r\n            </salesOrder>\r\n        </pi:MT_SalesOrder_0001>\r\n    </soapenv:Body>\r\n</soapenv:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/cxf/PIP/Step01/Samples/{{scenario}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"cxf",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Sales Order S2 - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender_2}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "xPipeline",
										"value": "false",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:pi=\"http://pi-elevation.bootcamp.com\">\r\n    <soapenv:Header/>\r\n    <soapenv:Body>\r\n        <pi:MT_SalesOrder_0001>\r\n            <salesOrder>\r\n                <orderNumber>50002</orderNumber>\r\n                <orderDate>10/01/2023</orderDate>\r\n                <customer>\r\n                    <firstName>Amruta</firstName>\r\n                    <lastName>Kamble</lastName>\r\n                    <street>Hauptstrasse</street>\r\n                    <number>89</number>\r\n                </customer>\r\n                <items>\r\n                    <itemNumber>Test</itemNumber>\r\n                    <material>Test_material</material>\r\n                    <quantity>5</quantity>\r\n                    <price>550</price>\r\n                </items>\r\n            </salesOrder>\r\n        </pi:MT_SalesOrder_0001>\r\n    </soapenv:Body>\r\n</soapenv:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/cxf/PIP/Step01/Samples/{{scenario}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"cxf",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Sample Point-to-Point scenario with P2P Bypass Option",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"scenario\", \"Scenario_5\");",
							"pm.collectionVariables.set(\"sender_1\", \"Sender_51\");",
							"pm.collectionVariables.set(\"sender_2\", \"Sender_52\");",
							"pm.collectionVariables.set(\"interface\", \"SalesOrder.Create\");",
							"pm.collectionVariables.set(\"receiver\", \"Receiver_51\");",
							"pm.collectionVariables.set(\"pid\", \"PIP_Samples_\"+pm.collectionVariables.get(\"scenario\"));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scenario 6 - Point-to-Point with IDoc inbound",
			"item": [
				{
					"name": "Setup Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create receiverDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"receiverDetermination\",\r\n\t\"Value\": \"{{receiver}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interfaceDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"interfaceDetermination_{{receiver}}\",\r\n\t\"Value\": \"/PIP/Step07/Samples/{{scenario}}/{{receiver}}/IfIdx1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read receiverDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='receiverDetermination')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='receiverDetermination')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read interfaceDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='interfaceDetermination_{{receiver}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='interfaceDetermination_{{receiver}}')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean up Partner Directory",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{pid}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{pid}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trigger sample messages",
					"item": [
						{
							"name": "Send Single Flight Booking IDoc - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "bulk",
										"value": "false",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:FlightBooking xmlns:ns0=\"http://demo.sap.com/aif\">\r\n    <Agency>109</Agency>\r\n    <FlightDetails>\r\n        <AirlineID>LH</AirlineID>\r\n        <ConnectionID>0400</ConnectionID>\r\n        <FlightDate>19.12.2023</FlightDate>\r\n        <Class>Y</Class>\r\n    </FlightDetails>\r\n    <PassengerDetails>\r\n        <Name>Brian Smith</Name>\r\n        <ID>10</ID>\r\n        <Birth>01.02.1975</Birth>\r\n    </PassengerDetails>\r\n</ns0:FlightBooking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/{{scenario}}/MockedIDocSender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"{{scenario}}",
										"MockedIDocSender"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Bulk Flight Booking IDoc - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "bulk",
										"value": "true",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:FlightBooking xmlns:ns0=\"http://demo.sap.com/aif\">\r\n    <Agency>109</Agency>\r\n    <FlightDetails>\r\n        <AirlineID>LH</AirlineID>\r\n        <ConnectionID>0400</ConnectionID>\r\n        <FlightDate>19.12.2023</FlightDate>\r\n        <Class>Y</Class>\r\n    </FlightDetails>\r\n    <PassengerDetails>\r\n        <Name>Brian Smith</Name>\r\n        <ID>10</ID>\r\n        <Birth>01.02.1975</Birth>\r\n    </PassengerDetails>\r\n</ns0:FlightBooking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/{{scenario}}/MockedIDocSender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"{{scenario}}",
										"MockedIDocSender"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Sample Point-to-Point scenario with IDoc sender adapter",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"scenario\", \"Scenario_6\");",
							"pm.collectionVariables.set(\"sender\", \"S4HCLNT601\");",
							"pm.collectionVariables.set(\"interface\", \"FLIGHTBOOKING/CREATEFROMDAT.FLIGHTBOOKING/CREATEFROMDAT01\");",
							"pm.collectionVariables.set(\"receiver\", \"Receiver_61\");",
							"pm.collectionVariables.set(\"pid\", \"PIP_Samples_\"+pm.collectionVariables.get(\"scenario\"));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scenario 6A - P2P with Integrated Messaging Runtime",
			"item": [
				{
					"name": "Setup Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Business Sender DEV to Sender Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"DEV\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{sender_d}}\",\r\n  \"Pid\": \"{{sender_a}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Business Sender QA to Sender Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"QA\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{sender_q}}\",\r\n  \"Pid\": \"{{sender_a}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Business Sender PRD to Sender Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"PRD\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{sender_p}}\",\r\n  \"Pid\": \"{{sender_a}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Logical Sender DEV to Sender Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"DEV\",\r\n  \"Scheme\": \"LogicalSystemName\",\r\n  \"Id\": \"{{sender_l_d}}\",\r\n  \"Pid\": \"{{sender_a}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Logical Sender QA to Sender Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"QA\",\r\n  \"Scheme\": \"LogicalSystemName\",\r\n  \"Id\": \"{{sender_l_q}}\",\r\n  \"Pid\": \"{{sender_a}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Logical Sender PRD to Sender Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"PRD\",\r\n  \"Scheme\": \"LogicalSystemName\",\r\n  \"Id\": \"{{sender_l_p}}\",\r\n  \"Pid\": \"{{sender_a}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Business Receiver DEV to Receiver Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"DEV\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{receiver_d}}\",\r\n  \"Pid\": \"{{receiver_a}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Business Receiver QA to Receiver Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"QA\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{receiver_q}}\",\r\n  \"Pid\": \"{{receiver_a}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Business Receiver PRD to Receiver Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"PRD\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{receiver_p}}\",\r\n  \"Pid\": \"{{receiver_a}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender_a}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create InboundQueue Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"InboundQueue\",\r\n\t\"Value\": \"PIPX01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create receiverDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"receiverDetermination\",\r\n\t\"Value\": \"{{receiver_a}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interfaceDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"interfaceDetermination_{{receiver_a}}\",\r\n\t\"Value\": \"/PIP/Step07/Samples/{{scenario}}/{{receiver}}/IfIdx1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender_a}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender_a}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read receiverDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='receiverDetermination')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='receiverDetermination')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read interfaceDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='interfaceDetermination_{{receiver_a}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='interfaceDetermination_{{receiver_a}}')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read InboundQueue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='InboundQueue')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='InboundQueue')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update MaxJMSRetries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"MaxJMSRetries\",\r\n\t\"Value\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='MaxJMSRetries')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean up Partner Directory",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Sender Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{sender_a}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{sender_a}}')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Receiver Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{receiver_a}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{receiver_a}}')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{pid}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{pid}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trigger sample messages",
					"item": [
						{
							"name": "Send Flight Booking - Create Single IDoc Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "bulk",
										"value": "false",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender_l_q}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:FlightBooking xmlns:ns0=\"http://demo.sap.com/aif\">\r\n    <Agency>109</Agency>\r\n    <FlightDetails>\r\n        <AirlineID>LH</AirlineID>\r\n        <ConnectionID>0400</ConnectionID>\r\n        <FlightDate>19.12.2023</FlightDate>\r\n        <Class>Y</Class>\r\n    </FlightDetails>\r\n    <PassengerDetails>\r\n        <Name>Brian Smith</Name>\r\n        <ID>10</ID>\r\n        <Birth>01.02.1975</Birth>\r\n    </PassengerDetails>\r\n</ns0:FlightBooking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/{{scenario}}/MockedIDocSender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"{{scenario}}",
										"MockedIDocSender"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Flight Booking - Create Bulk IDoc Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "bulk",
										"value": "true",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender_l_q}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:FlightBooking xmlns:ns0=\"http://demo.sap.com/aif\">\r\n    <Agency>109</Agency>\r\n    <FlightDetails>\r\n        <AirlineID>LH</AirlineID>\r\n        <ConnectionID>0400</ConnectionID>\r\n        <FlightDate>19.12.2023</FlightDate>\r\n        <Class>Y</Class>\r\n    </FlightDetails>\r\n    <PassengerDetails>\r\n        <Name>Brian Smith</Name>\r\n        <ID>10</ID>\r\n        <Birth>01.02.1975</Birth>\r\n    </PassengerDetails>\r\n</ns0:FlightBooking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/{{scenario}}/MockedIDocSender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"{{scenario}}",
										"MockedIDocSender"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Similar scenario like scenario 6 except that the integrated messaging runtime is used\n\n- Point-to-Point with IDoc inbound\n- Support for different tenant stages DEV, QA, PRD by maintaining business systems and logical systems\n    \n- Using integrated messaging runtime for async message processing",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"scenario\", \"Scenario_6\");",
							"pm.collectionVariables.set(\"receiver\", \"Receiver_61\");",
							"pm.collectionVariables.set(\"interface\", \"FLIGHTBOOKING/CREATEFROMDAT.FLIGHTBOOKING/CREATEFROMDAT01\");",
							"pm.collectionVariables.set(\"pid\", \"PIP_Samples_Scenario_6A\");",
							"pm.collectionVariables.set(\"sender_a\", \"BS_A6A\");",
							"pm.collectionVariables.set(\"sender_p\", \"BS_A6A_P\");",
							"pm.collectionVariables.set(\"sender_q\", \"BS_A6A_Q\");",
							"pm.collectionVariables.set(\"sender_d\", \"BS_A6A_D\");",
							"pm.collectionVariables.set(\"sender_l_p\", \"A6PCLNT602\");",
							"pm.collectionVariables.set(\"sender_l_q\", \"A6QCLNT602\");",
							"pm.collectionVariables.set(\"sender_l_d\", \"A6DCLNT602\");",
							"pm.collectionVariables.set(\"receiver_a\", \"BS_ERP6A\");",
							"pm.collectionVariables.set(\"receiver_p\", \"BS_ERP6A_P\");",
							"pm.collectionVariables.set(\"receiver_q\", \"BS_ERP6A_Q\");",
							"pm.collectionVariables.set(\"receiver_d\", \"BS_ERP6A_D\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scenario 7 -  RL with non-XML payload",
			"item": [
				{
					"name": "Setup Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n<!-- define header dc_country -->\r\n\t<xsl:param name=\"dc_country\"/>\r\n\t<xsl:template match=\"/\">\r\n        <ns0:Receivers xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <ReceiverNotDetermined>\r\n                <Type>Ignore</Type>\r\n                <DefaultReceiver/>\r\n            </ReceiverNotDetermined>\r\n    <xsl:if test=\"$dc_country = 'DE'\">\r\n            <Receiver>\r\n                <Service>{{receiver_1}}</Service>\r\n            </Receiver>\r\n    </xsl:if>\r\n    <xsl:if test=\"$dc_country != 'DE'\">\r\n            <Receiver>\r\n                <Service>{{receiver_2}}</Service>\r\n            </Receiver>\r\n    </xsl:if>\r\n        </ns0:Receivers>\r\n\t</xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interfaceDetermination XSLT for R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_1}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <Interface>\r\n                <Index>1</Index>\r\n                <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_1}}/IfIdx1</Service>\r\n            </Interface>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interfaceDetermination XSLT for R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_2}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n<!-- define header dc_contentType -->\r\n\t<xsl:param name=\"dc_contentType\"/>\r\n    <xsl:template match=\"/\">\r\n        <ns0:Interfaces xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n    <xsl:if test=\"contains($dc_contentType, 'json')\">\r\n            <Interface>\r\n                <Index>1</Index>\r\n                <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_2}}/IfIdx1</Service>\r\n            </Interface>\r\n    </xsl:if>\r\n    <xsl:if test=\"contains($dc_contentType, 'csv')\">\r\n            <Interface>\r\n                <Index>2</Index>\r\n                <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_2}}/IfIdx2</Service>\r\n            </Interface>\r\n    </xsl:if>\r\n        </ns0:Interfaces>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read interfaceDetermination XSLT for R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_1}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read interfaceDetermination XSLT for R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "interfaceDetermination_{{receiver_2}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean up Partner Directory Copy",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{pid}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{pid}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trigger sample messages",
					"item": [
						{
							"name": "Send Person DE JSON - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\":\"70000001\",\r\n    \"firstname\":\"Heike\",\r\n    \"lastname\":\"Schotte\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}?country=DE",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									],
									"query": [
										{
											"key": "country",
											"value": "DE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Person UK JSON - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\":\"70000002\",\r\n    \"firstname\":\"Sarah\",\r\n    \"lastname\":\"Mayor\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}?country=UK",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									],
									"query": [
										{
											"key": "country",
											"value": "UK"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Person UK CSV - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/csv",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "70000003;Tom;Miller\r\n70000004;John;Doe",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}?country=UK",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									],
									"query": [
										{
											"key": "country",
											"value": "UK"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Scenario with multiple receivers and JSON to JSON message mapping\n\n- Receiver determination based on header parameter\n    \n- Definition of dummy xml to avoid XSLT failing",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"scenario\", \"Scenario_7\");",
							"pm.collectionVariables.set(\"sender\", \"Sender_7\");",
							"pm.collectionVariables.set(\"interface\", \"Person.Create\");",
							"pm.collectionVariables.set(\"receiver_1\", \"Receiver_71\");",
							"pm.collectionVariables.set(\"receiver_2\", \"Receiver_72\");",
							"pm.collectionVariables.set(\"pid\", \"PIP_Samples_\"+pm.collectionVariables.get(\"scenario\"));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scenario 8 - Synchronous P2P with XI Inbound",
			"item": [
				{
					"name": "Setup Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Sender DEV to Sender Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"DEV\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{sender_d}}\",\r\n  \"Pid\": \"{{sender_a}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Sender QA to Sender Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"QA\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{sender_q}}\",\r\n  \"Pid\": \"{{sender_a}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Sender PRD to Sender Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"PRD\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{sender_p}}\",\r\n  \"Pid\": \"{{sender_a}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Receiver DEV to Receiver Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"DEV\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{receiver_d}}\",\r\n  \"Pid\": \"{{receiver_a}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Receiver QA to Receiver Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"QA\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{receiver_q}}\",\r\n  \"Pid\": \"{{receiver_a}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Receiver PRD to Receiver Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"PRD\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{receiver_p}}\",\r\n  \"Pid\": \"{{receiver_a}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID for Sender",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender_a}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create receiverDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"receiverDetermination\",\r\n\t\"Value\": \"{{receiver_a}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interfaceDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Pid\": \"{{pid}}\",\r\n\t\"Id\": \"interfaceDetermination_{{receiver_a}}\",\r\n\t\"Value\": \"/PIP/Step07/Samples/Scenario_8/NumberConversion\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read all Partners",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender_a}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender_a}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read receiverDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='receiverDetermination')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='receiverDetermination')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read interfaceDetermination String",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/StringParameters(Pid='{{pid}}',Id='interfaceDetermination_{{receiver_a}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"StringParameters(Pid='{{pid}}',Id='interfaceDetermination_{{receiver_a}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean up Partner Directory",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Sender Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{sender_a}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{sender_a}}')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Receiver Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{receiver_a}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{receiver_a}}')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{pid}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{pid}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trigger sample messages",
					"item": [
						{
							"name": "Send synchronous request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "sender",
										"value": "{{sender_q}}",
										"type": "text"
									},
									{
										"key": "interface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "namespace",
										"value": "{{namespace}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:MT_NumberConversion_REQ xmlns:ns0=\"http://pi-elevation.bootcamp.com\">\r\n    <number>1389</number>\r\n</ns0:MT_NumberConversion_REQ>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Samples/MockedXISender",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Samples",
										"MockedXISender"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Synchronous Point-to-Point scenario with XI sender adapter using the generic XI inbound flow\n\n- Using XI protocol on sender side\n- Support for different tenant stages DEV, QA, PRD by maintaining business systems",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"scenario\", \"Scenario_8\");",
							"pm.collectionVariables.set(\"interface\", \"SI_NumberConversion_Out\");",
							"pm.collectionVariables.set(\"namespace\", \"http://demo.sap.com/eip/recipient-list\");",
							"pm.collectionVariables.set(\"pid\", \"PIP_Samples_Scenario_8\");",
							"pm.collectionVariables.set(\"sender_a\", \"BS_ABC\");",
							"pm.collectionVariables.set(\"sender_p\", \"BS_ABC_P\");",
							"pm.collectionVariables.set(\"sender_q\", \"BS_ABC_Q\");",
							"pm.collectionVariables.set(\"sender_d\", \"BS_ABC_D\");",
							"pm.collectionVariables.set(\"receiver_a\", \"BS_ERP8\");",
							"pm.collectionVariables.set(\"receiver_p\", \"BS_ERP8_P\");",
							"pm.collectionVariables.set(\"receiver_q\", \"BS_ERP8_Q\");",
							"pm.collectionVariables.set(\"receiver_d\", \"BS_ERP8_D\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scenario 9 - Synchronous CBR",
			"item": [
				{
					"name": "Setup Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Sender DEV to Sender Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"DEV\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{sender_d}}\",\r\n  \"Pid\": \"{{sender_a}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Sender QA to Sender Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"QA\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{sender_q}}\",\r\n  \"Pid\": \"{{sender_a}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Sender PRD to Sender Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"PRD\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{sender_p}}\",\r\n  \"Pid\": \"{{sender_a}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Receiver 1 DEV to Receiver 1 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"DEV\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{receiver_d_1}}\",\r\n  \"Pid\": \"{{receiver_a_1}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Receiver 1 QA to Receiver 1 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"QA\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{receiver_q_1}}\",\r\n  \"Pid\": \"{{receiver_a_1}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Receiver 1 PRD to Receiver 1 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"PRD\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{receiver_p_1}}\",\r\n  \"Pid\": \"{{receiver_a_1}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Receiver 2 DEV to Receiver 2 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"DEV\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{receiver_d_2}}\",\r\n  \"Pid\": \"{{receiver_a_2}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Receiver 2 QA to Receiver 2 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"QA\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{receiver_q_2}}\",\r\n  \"Pid\": \"{{receiver_a_2}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Receiver 2 PRD to Receiver 2 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"PRD\",\r\n  \"Scheme\": \"BusinessSystemName\",\r\n  \"Id\": \"{{receiver_p_2}}\",\r\n  \"Pid\": \"{{receiver_a_2}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map Alternative Partner to Partner ID for Sender",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Agency\": \"{{sender_a}}\",\r\n  \"Scheme\": \"SenderInterface\",\r\n  \"Id\": \"{{interface}}\",\r\n  \"Pid\": \"{{pid}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    <xsl:template match=\"/\">\r\n        <ns0:Receivers xmlns:ns0=\"http://sap.com/xi/XI/System\">\r\n            <ReceiverNotDetermined>\r\n                <Type>Error</Type>\r\n                <DefaultReceiver/>\r\n            </ReceiverNotDetermined>\r\n            <xsl:if test=\"/*:FlightStatusRequest/FlightDetails/AirlineID = 'LH'\">\r\n                <Receiver>\r\n                    <Service>{{receiver_a_1}}</Service>\r\n                    <Interfaces>\r\n                        <Interface>\r\n                            <Index>1</Index>\r\n                            <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_a_1}}/IfIdx1</Service>\r\n                        </Interface>\r\n                    </Interfaces>\r\n                </Receiver>\r\n            </xsl:if>\r\n            <xsl:if test=\"/*:FlightStatusRequest/FlightDetails/AirlineID != 'LH'\">\r\n                <Receiver>\r\n                    <Service>{{receiver_a_2}}</Service>\r\n                    <Interfaces>\r\n                        <Interface>\r\n                            <Index>1</Index>\r\n                            <Service>/PIP/Step07/Samples/{{scenario}}/{{receiver_a_2}}/IfIdx1</Service>\r\n                        </Interface>\r\n                    </Interfaces>\r\n                </Receiver>\r\n            </xsl:if>\r\n        </ns0:Receivers>\r\n    </xsl:template>\r\n</xsl:stylesheet>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/upsert",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"upsert"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Partner Directory entries",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read all Partners",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Alternative Partner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "https://{{apihost}}/api/v1/AlternativePartners?$filter=Agency eq '{{sender_a}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'&$select=Pid",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"AlternativePartners"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Agency eq '{{sender_a}}' and Scheme eq 'SenderInterface' and Id eq '{{interface}}'"
										},
										{
											"key": "$select",
											"value": "Pid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read receiverDetermination XSLT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{apiAccessToken}}",
										"type": "text"
									},
									{
										"key": "Pid",
										"value": "{{pid}}",
										"type": "text"
									},
									{
										"key": "id",
										"value": "receiverDetermination",
										"type": "text"
									},
									{
										"key": "url",
										"value": "https://{{apihost}}/api/v1/BinaryParameters",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}/http/pip/pd/xslt/read",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"pip",
										"pd",
										"xslt",
										"read"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean up Partner Directory",
					"item": [
						{
							"name": "Fetch PD Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"apiAccessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apipassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{apiusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{apitokenhost}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{apitokenhost}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Sender Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{sender_a}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{sender_a}}')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Receiver 1 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{receiver_a_1}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{receiver_a_1}}')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Receiver 2 Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{receiver_a_2}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{receiver_a_2}}')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Partner Scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{apiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/api/v1/Partners('{{pid}}')",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"api",
										"v1",
										"Partners('{{pid}}')"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trigger sample messages",
					"item": [
						{
							"name": "Send synchronous request LH Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender_q}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:FlightStatusRequest\":{\r\n        \"Agency\":\"109\",\r\n        \"FlightDetails\":{\r\n            \"AirlineID\":\"LH\",\r\n            \"ConnectionID\":\"0400\",\r\n            \"FlightDate\":\"19-12-2023\",\r\n            \"Class\":\"Y\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send synchronous request SQ Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender_q}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:FlightStatusRequest\":{\r\n        \"Agency\":\"109\",\r\n        \"FlightDetails\":{\r\n            \"AirlineID\":\"SQ\",\r\n            \"ConnectionID\":\"0325\",\r\n            \"FlightDate\":\"19.12.2023\",\r\n            \"Class\":\"Y\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send synchronous request LH Wrong class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "SAP_Sender",
										"value": "{{sender_q}}",
										"type": "text"
									},
									{
										"key": "SAP_SenderInterface",
										"value": "{{interface}}",
										"type": "text"
									},
									{
										"key": "host",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ns0:FlightStatusRequest\":{\r\n        \"Agency\":\"109\",\r\n        \"FlightDetails\":{\r\n            \"AirlineID\":\"LH\",\r\n            \"ConnectionID\":\"0400\",\r\n            \"FlightDate\":\"19-12-2023\",\r\n            \"Class\":\"X\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/http/PIP/Step01/Samples/{{scenario}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"http",
										"PIP",
										"Step01",
										"Samples",
										"{{scenario}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Synchronous Content-Based-Router scenario\n\n- Support for different tenant stages DEV, QA, PRD by maintaining business systems\n    \n- Using integrated messaging runtime for sync message processing",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"scenario\", \"Scenario_9\");",
							"pm.collectionVariables.set(\"interface\", \"FlightStatus\");",
							"pm.collectionVariables.set(\"namespace\", \"http://demo.sap.com/eip/cbr\");",
							"pm.collectionVariables.set(\"pid\", \"PIP_Samples_Scenario_9\");",
							"pm.collectionVariables.set(\"sender_a\", \"BS_AG9\");",
							"pm.collectionVariables.set(\"sender_p\", \"BS_AG9_P\");",
							"pm.collectionVariables.set(\"sender_q\", \"BS_AG9_Q\");",
							"pm.collectionVariables.set(\"sender_d\", \"BS_AG9_D\");",
							"pm.collectionVariables.set(\"receiver_a_1\", \"BS_AL91\");",
							"pm.collectionVariables.set(\"receiver_a_2\", \"BS_AL92\");",
							"pm.collectionVariables.set(\"receiver_p_1\", \"BS_AL91_P\");",
							"pm.collectionVariables.set(\"receiver_p_2\", \"BS_AL92_P\");",
							"pm.collectionVariables.set(\"receiver_q_1\", \"BS_AL91_Q\");",
							"pm.collectionVariables.set(\"receiver_q_2\", \"BS_AL92_Q\");",
							"pm.collectionVariables.set(\"receiver_d_1\", \"BS_AL91_D\");",
							"pm.collectionVariables.set(\"receiver_d_2\", \"BS_AL92_D\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "sender",
			"value": ""
		},
		{
			"key": "interface",
			"value": ""
		},
		{
			"key": "pidOld",
			"value": ""
		},
		{
			"key": "receiver_1",
			"value": ""
		},
		{
			"key": "receiver_2",
			"value": ""
		},
		{
			"key": "receiver_3",
			"value": ""
		},
		{
			"key": "pid",
			"value": ""
		},
		{
			"key": "scenario",
			"value": ""
		},
		{
			"key": "sender_1",
			"value": ""
		},
		{
			"key": "sender_2",
			"value": ""
		},
		{
			"key": "sender_3",
			"value": ""
		},
		{
			"key": "namespace",
			"value": ""
		},
		{
			"key": "receiver",
			"value": ""
		},
		{
			"key": "sender_q_1",
			"value": ""
		},
		{
			"key": "sender_q_2",
			"value": ""
		},
		{
			"key": "sender_d_1",
			"value": ""
		},
		{
			"key": "sender_d_2",
			"value": ""
		},
		{
			"key": "sender_p_1",
			"value": ""
		},
		{
			"key": "sender_p_2",
			"value": ""
		},
		{
			"key": "receiver_p_1",
			"value": ""
		},
		{
			"key": "receiver_p_2",
			"value": ""
		},
		{
			"key": "sender_p_3",
			"value": ""
		},
		{
			"key": "receiver_q_1",
			"value": ""
		},
		{
			"key": "receiver_q_2",
			"value": ""
		},
		{
			"key": "receiver_d_1",
			"value": ""
		},
		{
			"key": "receiver_d_2",
			"value": ""
		},
		{
			"key": "sender_a_1",
			"value": ""
		},
		{
			"key": "sender_a_2",
			"value": ""
		},
		{
			"key": "receiver_a_1",
			"value": ""
		},
		{
			"key": "receiver_a_2",
			"value": ""
		},
		{
			"key": "sender_a",
			"value": ""
		},
		{
			"key": "sender_p",
			"value": ""
		},
		{
			"key": "sender_q",
			"value": ""
		},
		{
			"key": "sender_d",
			"value": ""
		},
		{
			"key": "sender_l_p",
			"value": ""
		},
		{
			"key": "sender_l_q",
			"value": ""
		},
		{
			"key": "sender_l_d",
			"value": ""
		},
		{
			"key": "receiver_a",
			"value": ""
		},
		{
			"key": "receiver_p",
			"value": ""
		},
		{
			"key": "receiver_q",
			"value": ""
		},
		{
			"key": "receiver_d",
			"value": ""
		}
	]
}